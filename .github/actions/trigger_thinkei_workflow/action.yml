name: "Trigger Thinkei's Workflow"
description: "Trigger Thinkei's Workflow"
inputs:
  repo:
    required: true
  workflow_id:
    required: true
  ref:
    required: true
  inputs:
    default: ''
    required: false
  github-token:
    required: true
  run_key:
    default: ''
    required: false
runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v7
      name: Trigger Thinkei's Workflow ${{ inputs.workflow_id }} in repo ${{ inputs.repo }}
      with:
        debug: true
        github-token: ${{ inputs.github-token }}
        script: |
          try {
            const job_name_suffix = '${{ github.repository }}#${{ github.run_id }}[${{ strategy.job-index }}]${{ inputs.run_key }}';

            const runs = await github.request('GET /repos/{owner}/{repo}/actions/runs', {
              owner: 'Thinkei',
              repo: '${{ inputs.repo }}',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            if (runs.status !== 200) {
              core.setFailed('could not get actions runs');
            }
            const run = runs.data.workflow_runs.find(run => run.name.includes(job_name_suffix));
            if (run) {
              console.log('workflow already triggered');
              return job_name_suffix;
            }

            const optional_inputs = '${{ inputs.inputs }}' === '' ? {} : JSON.parse('${{ inputs.inputs }}');
          
            const create_result = await github.rest.actions.createWorkflowDispatch({
              owner: 'Thinkei',
              repo: '${{ inputs.repo }}',
              workflow_id: '${{ inputs.workflow_id }}',
              ref: '${{ inputs.ref }}',
              inputs: {
                ...optional_inputs,
                job_name_suffix: job_name_suffix,
              },
            })
            if (create_result.status !== 204) {
              core.setFailed('could not start actions runs');
            }
            return job_name_suffix;
          } catch(error) {
            console.error(error);
            core.setFailed(error);
          }
