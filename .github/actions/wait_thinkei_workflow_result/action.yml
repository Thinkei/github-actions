name: "Wait for Thinkei Workflow Result"
description: "Wait for Thinkei Workflow Result"
inputs:
  repo:
    required: true
  github-token:
    required: true
  run_key:
    default: ''
    required: false
runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v7
      id: get_workflow_run_id
      name: Get Thinkei workflow Run ID
      with:
        github-token: ${{ inputs.github-token }}
        debug: true
        script: |
          const job_name_suffix = '${{ github.repository }}#${{ github.run_id }}[${{ strategy.job-index }}]${{ inputs.run_key }}';

          console.log('job_name_suffix:', job_name_suffix);
          let thinkei_run_id = null;
          let retry = 0;
          while (!thinkei_run_id && retry < 10) {
            retry++;
            const runs = await github.request('GET /repos/{owner}/{repo}/actions/runs', {
              owner: 'Thinkei',
              repo: '${{ inputs.repo }}',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            if (runs.status !== 200) {
              core.setFailed('could not get actions runs');
            }
            const run = runs.data.workflow_runs.find(run => run.name.includes(job_name_suffix));
            if (run) {
              console.log(run.name, run.status);
              thinkei_run_id = run.id;
              break;
            }
            await new Promise(resolve => setTimeout(resolve, 10000));
          }

          if (!thinkei_run_id) {
            core.setFailed('could not find Thinkei workflow run');
          }
          return thinkei_run_id;
    - uses: actions/github-script@v7
      if: ${{ github.run_attempt != '1' }}
      name: Re-run the failed jobs if Thinkei workflow failed
      with:
        github-token: ${{ inputs.github-token }}
        debug: true
        script: |
          const thinkei_run_id = ${{ steps.get_workflow_run_id.outputs.result }};

          const run = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {
            owner: 'Thinkei',
            repo: '${{ inputs.repo }}',
            run_id: thinkei_run_id,
            headers: {
              'X-GitHub-Api-Version': '2022-11-28'
            }
          })
          if (run.status !== 200) {
            core.setFailed('could not get actions runs');
          }
          console.log(run.data.status);
          if (run.data.status === 'completed') {
            console.log(run.data.conclusion);
            if (run.data.conclusion !== 'success') {
              // Re-run the failed jobs
              const re_run = await github.request('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs', {
                owner: 'Thinkei',
                repo: '${{ inputs.repo }}',
                run_id: thinkei_run_id,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              })
            }
          }
    - uses: actions/github-script@v7
      name: Wait for Thinkei workflow to Finish and check result
      with:
        github-token: ${{ inputs.github-token }}
        debug: true
        script: |
          const thinkei_run_id = ${{ steps.get_workflow_run_id.outputs.result }};

          while (true) {
            const run = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {
              owner: 'Thinkei',
              repo: '${{ inputs.repo }}',
              run_id: thinkei_run_id,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            if (run.status !== 200) {
              core.setFailed('could not get actions runs');
            }
            console.log(run.data.status);
            if (run.data.status === 'completed') {
              console.log(run.data.conclusion);
              if (run.data.conclusion === 'success') {
                core.setOutput('task_result', 'success');
              } else {
                console.log('Thinkei workflow failed/cancelled', 'https://github.com/Thinkei/${{ inputs.repo }}/actions/runs/' + thinkei_run_id);
                core.setFailed('Thinkei workflow failed/cancelled');
              }
              break;
            }
            await new Promise(resolve => setTimeout(resolve, 60000));
          }

